<?php

namespace App\Services;

use App\Models\ReferralStat;
use App\Models\Role;
use App\Models\Tariff;
use App\Models\Template;
use App\Models\User;
use CURLFile;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Str;

class TelegramService
{
    private string $token;
    private string $clientToken;

    public function __construct()
    {
        $this->token = config('services.telegram.token');
        $this->clientToken = config('services.telegram.client_token');
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–µ–±—Ö—É–∫)
    public function handleWebhook($update)
    {
        return $this->handleWebhookCommon($update, true);
    }

    public function handleWebhookClient($update)
    {
        return $this->handleWebhookCommon($update, false);
    }

    private function handleWebhookCommon(array $update, bool $forSeller)
    {
        try {
            if (isset($update['message'])) {
                $chatId = $update['message']['chat']['id'];
                $text = $update['message']['text'] ?? '';

                if (strpos($text, '/start') === 0) {
                    $startPayload = trim(str_replace('/start', '', $text));

                    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–∫–∞
                    if (str_starts_with($startPayload, 'ref')) {
                        $refUserId = (int) str_replace('ref', '', $startPayload);

                        if (User::where('id', $refUserId)->exists()) {
                            // –¢–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ä–æ–ª–∏

                            ReferralStat::updateOrCreate(
                                ['user_id' => $refUserId, 'type' => 'telegram'],
                                ['clicks_count' => DB::raw('clicks_count + 1')]
                            );

                            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º —É—á–µ—Å—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é/–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
                            Cache::put("ref_tg_{$chatId}", $refUserId, now()->addDays(10));
                        }
                    }

                    // —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ –¢–ì
                    \Log::info('Start payload: ' . $startPayload);
                    \Log::info("srt", [str_starts_with($startPayload, 'register')]);
                    if (str_starts_with($startPayload, 'register')) {
                        \Log::info('–†–µ–≥–∏—Å—Ç–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ –¢–ì');
                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
                        $keyboard = [
                            'keyboard' => [
                                [
                                    [
                                        'text' => 'üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º',
                                        'request_contact' => true
                                    ]
                                ]
                            ],
                            'resize_keyboard' => true,
                            'one_time_keyboard' => true
                        ];

                        $this->sendMessage(
                            $chatId,
                            "‚ö° –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω¬ª –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞ –∏ –ø–æ–ª—É—á–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å.\n\n–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—è—Å—å, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å [–ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏](https://wbdiscount.pro/privacy) –∏ [–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º](https://wbdiscount.pro/terms).",
                            $keyboard,
                            $forSeller
                        );
                    }


                    if(!str_starts_with($startPayload, 'register')){
                        $this->startCommand($chatId, $startPayload, $forSeller);
                    }
                } else {
                    if (isset($update['message']['contact'])) {
                        $phone = $update['message']['contact']['phone_number'];
                        $tgId  = $update['message']['from']['id'];

                        $firstName = $update['message']['from']['first_name'] ?? '';
                        $lastName  = $update['message']['from']['last_name'] ?? '';
                        $username  = $update['message']['from']['username'] ?? null;

                        $fullName = trim($firstName . ' ' . $lastName);

                        // –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º telegram_id
                        $user = User::where('telegram_id', $tgId)->first();

                        if (!$user) {
                            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å
                            $role = $forSeller
                                ? Role::where('slug', 'seller')->first()
                                : Role::where('slug', 'buyer')->first();

                            // –î–æ—Å—Ç–∞—ë–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –∏–∑ –∫–µ—à–∞ (–µ—Å–ª–∏ –±—ã–ª –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ ref)
                            $refUserId = Cache::pull("ref_tg_{$chatId}");

                            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
                            $passwordPlain = Str::random(8);

                            // –°–æ–∑–¥–∞—ë–º —é–∑–µ—Ä–∞
                            $user = User::create([
                                'name'         => $fullName ?: ($username ? $username : 'tg_' . $tgId),
                                'password'     => bcrypt($passwordPlain),
                                'phone'        => $phone,
                                'role_id'      => $role->id,
                                'is_configured'=> true,
                                'telegram_id'  => $tgId,
                                'referral_id'  => $refUserId,
                            ]);

                            if($forSeller) {
                                $tariff = Tariff::where('name', '–ü—Ä–æ–±–Ω—ã–π')->first();
                                DB::table('user_tariff')->insert([
                                    'user_id' => $user->id,
                                    'tariff_id' => $tariff->id,
                                    'end_date' => now()->addDays(3),
                                    'products_count' => 10,
                                    'variant_name' => '3 –¥–Ω—è',
                                    'duration_days' => 3,
                                    'price_paid' => 0
                                ]);

                                $template = new Template();
                                $template->createDefault($user->id);
                            }
                            // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞
                            $link = $forSeller ? 'https://wbdiscount.pro/seller/login' : 'https://wbdiscount.pro/login';
                            $this->sendMessage(
                                $chatId,
                                "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π!\n\n–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n–õ–æ–≥–∏–Ω: `{$phone}`\n–ü–∞—Ä–æ–ª—å: `{$passwordPlain}`\n\nüîó <a href='{$link}'>–í–æ–π—Ç–∏ –≤ –∫–∞–±–∏–Ω–µ—Ç</a>\n\n–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –ø—Ä–æ–±–ª–µ–º—ã, <a href='https://wbdiscount.pro/dashboard/support'>–Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º</a>.",
                                [],
                                $forSeller
                            );
                            $this->sendMessage(
                                $chatId,
                                "üéÅ –ü–æ–¥–∞—Ä–æ–∫!\n\n–í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ –Ω–∞ 3 –¥–Ω—è –∏ 10 –≤—ã–∫—É–ø–æ–≤. üöÄ\n\n–†–∞–∑–º–µ—Å—Ç–∏—Ç–µ –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å, —á—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º.",
                                [],
                                $forSeller
                            );
                        } else {
                            $this->sendMessage(
                                $chatId,
                                "‚ö†Ô∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!",
                                [],
                                $forSeller
                            );
                        }

                        //$this->sendMessage($chatId, '‚úÖ–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–µ–ª–∏–ª–∏—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º!', [], $forSeller);
                    } else {
                        $this->sendMessage($chatId, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞', [], $forSeller);
                    }
                }
            }

            return response()->json(['message' => true], 200);
        } catch (\Exception $exception) {
            \Log::channel('tg')->error($exception->getMessage());
            return response()->json(['message' => true], 200);
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    public function sendMessage($chatId, $text, array $keyboard = [], $forSeller = true): void {
        // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç MarkdownV2 (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ Markdown)
//        $escaped = preg_replace_callback(
//            '/[_\*\[\]\(\)~`>#\+\-=|{}\.\!]/',
//            fn($m) => '\\' . $m[0],
//            $text
//        );

        $escaped = $text;

        $data = [
            'chat_id'    => $chatId,
            'text'       => $escaped,
            'parse_mode' => 'MarkdownV2',
        ];

//        if (!empty($keyboard)) {
//            $data['reply_markup'] = $keyboard; // –£–∂–µ –ø–µ—Ä–µ–¥–∞–µ–º –≥–æ—Ç–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
//        }

        // –°–∫—Ä—ã—Ç–∏–µ web_app –∫–Ω–æ–ø–æ–∫! –ß—Ç–æ –±—ã –≤–µ—Ä—É–Ω—Ç—å –≤—Å–µ –Ω–∞–∑–∞–¥ - –Ω—É–∂–Ω–æ —É–±—Ä–∞—Ç—å —ç—Ç–æ—Ç –±–ª–æ–∫ –∏ —Ä–∞—Å–∫–æ–º–µ–Ω–∏—Ç—å –≤–µ—Ä—Ö–Ω–∏–π
        if (!empty($keyboard)) {
            // –ï—Å–ª–∏ —ç—Ç–æ inline-–∫–ª–∞–≤–∞ —Å web_app ‚Üí –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º
            if (isset($keyboard['inline_keyboard'])) {
                $hasWebApp = false;
                foreach ($keyboard['inline_keyboard'] as $row) {
                    foreach ($row as $btn) {
                        if (isset($btn['web_app'])) {
                            $hasWebApp = true;
                            break 2;
                        }
                    }
                }

                if ($hasWebApp) {
                    // –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
                    $data['reply_markup'] = ['remove_keyboard' => true];
                } else {
                    $data['reply_markup'] = $keyboard;
                }
            } else {
                $data['reply_markup'] = $keyboard;
            }
        }

        $token = $forSeller ? $this->token : $this->clientToken;

        $ch = curl_init("https://api.telegram.org/bot{$token}/sendMessage");
        curl_setopt($ch, CURLOPT_HTTPHEADER, ['Content-Type: application/json']);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data, JSON_UNESCAPED_UNICODE));

        $response = curl_exec($ch);
        curl_close($ch);
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
    public function sendFile($chatId, $filePath, $caption = '', $keyboard = []): void
    {
        $url = "https://api.telegram.org/bot$this->token/sendDocument";

        // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è multipart/form-data
        $postFields = [
            'chat_id' => $chatId,
            'caption' => $caption,
            'document' => new CURLFile(realpath($filePath)),
        ];

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if (!empty($keyboard)) {
            $postFields['reply_markup'] = json_encode([
                'inline_keyboard' => $keyboard,
            ]);
        }

        $ch = curl_init();
        curl_setopt_array($ch, [
            CURLOPT_URL => $url,
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_POST => true,
            CURLOPT_POSTFIELDS => $postFields,
        ]);

        $response = curl_exec($ch);
        curl_close($ch);
    }

    // –ö–æ–º–∞–Ω–¥–∞ /start
    private function startCommand($chatId, $startPayload = null, $forSeller = true): void
    {
        if ($startPayload) {
            // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É
            if($forSeller){
                $user = User::where('tg_token', $startPayload)->where('role_id', function ($query){
                    return $query->select('id')->from('roles')->where('slug', 'seller');
                })->first();
            }else{
                $user = User::where('tg_token', $startPayload)->where('role_id', function ($query){
                    return $query->select('id')->from('roles')->where('slug', 'buyer');
                })->first();
            }


            if ($user) {
                $user->update(['telegram_id' => $chatId, 'tg_token' => null]);

                $webAppUrl = config('app.web_app_url'). '?chat_id=' . $chatId;
                $keyboard = [
                    'inline_keyboard' => [
                        [
                            [
                                'text' => 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
                                'web_app' => ['url' => $webAppUrl]
                            ]
                        ]
                    ],
                ];

                $this->sendMessage($chatId, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–ª–∏ –∞–∫–∫–∞—É–Ω—Ç!", $keyboard, $forSeller);
                return;
            }
        }

        $welcomeMessage = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç WBDiscount!

–≠—Ç–æ—Ç –±–æ—Ç —Å—Ç–∞–Ω–µ—Ç –≤–∞—à–∏–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã–∫—É–ø–∞–º–∏ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π. –í–æ—Ç —á—Ç–æ –æ–Ω –º–æ–∂–µ—Ç –¥–µ–ª–∞—Ç—å –¥–ª—è –≤–∞—Å:

‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –≤—ã–∫—É–ø–∞—Ö ‚Äî –ø–æ–ª—É—á–∞–π—Ç–µ –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è, –∫–æ–≥–¥–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –Ω–æ–≤—ã–π –≤—ã–∫—É–ø.

‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–∫—É–ø–∞ ‚Äî –≤—Å–µ–≥–¥–∞ –±—É–¥—å—Ç–µ –≤ –∫—É—Ä—Å–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –≤–∞—à–∏—Ö –≤—ã–∫—É–ø–æ–≤: –æ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞.

‚úÖ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ ‚Äî —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –≤—Å–µ–º–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏, –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –±–∞–ª–∞–Ω—Å–∞ –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è–º–∏.

‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è ‚Äî –ø–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∏ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ —Ä–µ–∞–≥–∏—Ä—É–π—Ç–µ –Ω–∞ –Ω–∏—Ö.

‚úÖ –ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ ‚Äî –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —É–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞—à–∏–º–∏ –≤—ã–∫—É–ø–∞–º–∏ –Ω–∞ WBDiscount.";
        $this->sendMessage($chatId, $welcomeMessage,[], $forSeller);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        $user = User::where('telegram_id', $chatId)->first();
        if (!$user) {
            // –°–æ–∑–¥–∞–µ–º Sanctum —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            $webAppUrl = config('app.frontend_url'). '?chat_id=' . $chatId;

            $message = "‚ö†Ô∏è –í—ã –ø–æ–∫–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ.";
            $keyboard = [
                'inline_keyboard' => [
                    [
                        [
                            'text' => 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
                            'web_app' => ['url' => $webAppUrl]
                        ]
                    ]
                ],
            ];
            $this->sendMessage($chatId, $message, $keyboard, $forSeller);
        }
    }

    public function sendNotification(string $user_id, string $text, array $keyword): void
    {
        try{
            $user = User::where('id',$user_id)->select('telegram_id', 'role_id')->first();
            $isSeller = $user->role_id === Role::where('slug', 'seller')->pluck('id')->first();
            if($user != null){
                $this->sendMessage($user->telegram_id, $text, $keyword, $isSeller);
            }
        }catch (\Exception $exception){
            \Log::error('TelegramService sendNotification error: ' . $exception->getMessage());
            return;
        }
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º

    public function generateAuthLink(User $user): string
    {
        if($user->role?->slug !== 'seller') {
            $botUsername = config('services.telegram.client_username');
        }else{
            $botUsername = config('services.telegram.username');
        }
        $token = $this->generateUserToken($user);

        return "https://t.me/{$botUsername}?start={$token}";
    }

    public function generateRefLink(User $user): string
    {
        if($user->role?->slug !== 'seller') {
            $botUsername = config('services.telegram.client_username');
        }else{
            $botUsername = config('services.telegram.username');
        }

        return "https://t.me/{$botUsername}?start=ref{$user->id}";
    }

    private function generateUserToken(User $user): string
    {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        $token = Str::random(32);
        $update = $user->update([
            'tg_token' => $token
        ]);

        return $token;
    }
}
